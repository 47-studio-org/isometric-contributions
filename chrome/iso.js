// Generated by CoffeeScript 1.6.3
var getSquareColor, icRun, initUI, loadStats, renderIsometricChart, script;

icRun = function() {
  var observer, target;
  target = document.querySelector('.js-calendar-graph');
  if (target != null) {
    observer = new MutationObserver(function(mutations) {
      return mutations.forEach(function(mutation) {
        var bestDay, days, maxCount;
        if (mutation.type === 'childList') {
          days = $('#calendar-graph rect');
          bestDay = null;
          maxCount = null;
          (d3.selectAll(days)).attr('data-contrib-count', function(d, i) {
            if (d[1] > maxCount) {
              bestDay = d[0], maxCount = d[1];
            }
            return d[1];
          });
          observer.disconnect();
          target.setAttribute('data-max-contributions', maxCount);
          return target.setAttribute('data-best-day', bestDay);
        }
      });
    });
    return observer.observe(target, {
      attributes: true,
      childList: true,
      characterData: true
    });
  }
};

script = document.createElement('script');

script.appendChild(document.createTextNode("(" + icRun + ")();"));

document.documentElement.appendChild(script);

renderIsometricChart = function() {
  var GH_OFFSET, MAX_HEIGHT, SIZE, canvas, contribCount, maxContributions, pixelView, point;
  ($('<div class="ic-contributions-wrapper"></div>')).insertBefore('#contributions-calendar');
  ($('<canvas id="isometric-contributions" width="728" height="470"></canvas>')).appendTo('.ic-contributions-wrapper');
  SIZE = 12;
  GH_OFFSET = 13;
  MAX_HEIGHT = 100;
  canvas = document.getElementById('isometric-contributions');
  point = new obelisk.Point(87, 100);
  pixelView = new obelisk.PixelView(canvas, point);
  maxContributions = ($('.js-calendar-graph')).data('max-contributions');
  contribCount = null;
  return ($('#calendar-graph g > g')).each(function(g) {
    var x;
    x = parseInt(((($(this)).attr('transform')).match(/(\d+)/))[0] / GH_OFFSET);
    return (($(this)).find('rect')).each(function(r) {
      var color, cube, cubeHeight, dimension, p3d, style, y;
      r = ($(this)).get(0);
      y = parseInt((($(this)).attr('y')) / GH_OFFSET);
      style = ($(this)).attr('style');
      contribCount = parseInt(($(this)).data('contrib-count'));
      cubeHeight = 3;
      if (maxContributions > 0) {
        cubeHeight += parseInt(MAX_HEIGHT / maxContributions * contribCount);
      }
      dimension = new obelisk.CubeDimension(SIZE, SIZE, cubeHeight);
      color = getSquareColor(style);
      cube = new obelisk.Cube(dimension, color, false);
      p3d = new obelisk.Point3D(SIZE * x, SIZE * y, 0);
      return pixelView.renderObject(cube, p3d);
    });
  });
};

initUI = function() {
  var contributionsBox, html, insertLocation, toggleClass;
  contributionsBox = (($('#contributions-calendar')).closest('.box')).find('.box-body');
  insertLocation = (($('#contributions-calendar')).closest('.box')).find('.box-header .box-title');
  toggleClass = '';
  if (((contributionsBox.closest('.box')).find('.box-header .octicon-lock')).length) {
    toggleClass = 'ic-with-lock';
  }
  html = "<span class=\"ic-toggle " + toggleClass + "\">\n  <span class=\"tooltipped tooltipped-nw\" aria-label=\"Normal chart view\">\n    <a href=\"#\" class=\"ic-toggle-option squares\" data-ic-option=\"squares\"></a>\n  </span>\n  <span class=\"tooltipped tooltipped-nw\" aria-label=\"Isometric chart view\">\n    <a href=\"#\" class=\"ic-toggle-option cubes\" data-ic-option=\"cubes\"></a>\n  </span>\n</span>";
  ($(html)).insertBefore(insertLocation);
  ($('.ic-toggle-option')).click(function(e) {
    var option;
    e.preventDefault();
    option = $(this).data('ic-option');
    if (option === 'squares') {
      (contributionsBox.removeClass('ic-cubes')).addClass('ic-squares');
    } else {
      (contributionsBox.removeClass('ic-squares')).addClass('ic-cubes');
    }
    ($('.ic-toggle-option')).removeClass('active');
    ($(this)).addClass('active');
    return chrome.storage.local.set({
      toggleSetting: option
    });
  });
  chrome.storage.local.get('toggleSetting', function(result) {
    if (result.toggleSetting != null) {
      ($(".ic-toggle-option." + result.toggleSetting)).addClass('active');
      return contributionsBox.addClass("ic-" + result.toggleSetting);
    } else {
      ($('.ic-toggle-option.cubes')).addClass('active');
      return (contributionsBox.removeClass('ic-squares')).addClass('ic-cubes');
    }
  });
  html = "<span class=\"ic-footer\">\n  <a href=\"#\" class=\"ic-2d-toggle\">Show normal chart below ▾</a>\n</span>";
  ($(html)).appendTo($('.ic-contributions-wrapper'));
  ($('.ic-2d-toggle')).click(function(e) {
    e.preventDefault();
    if (contributionsBox.hasClass('show-2d')) {
      ($(this)).text('Show normal chart below ▾');
      return contributionsBox.removeClass('show-2d');
    } else {
      ($(this)).text('Hide normal chart below ▴');
      return contributionsBox.addClass('show-2d');
    }
  });
  return loadStats();
};

loadStats = function() {
  var countBest, countCurrent, countLongest, countTotal, dateBest, dateParts, datesCurrent, datesLongest, datesTotal, html, str;
  str = ($('.contrib-day')).html();
  html = $.parseHTML(str);
  countTotal = (html[1].innerText.match(/(((\d{1,3})(,\d{3})*)|(\d+))(.\d+)?/))[0];
  datesTotal = $.trim(html[2].nodeValue);
  countBest = ($('.js-calendar-graph')).data('max-contributions');
  dateParts = (($('.js-calendar-graph')).data('best-day')).split(' ');
  dateBest = 'Not so busy after all.';
  if (dateParts[1] != null) {
    dateBest = "" + dateParts[1] + " " + dateParts[2] + " " + dateParts[3];
  }
  html = "<div class=\"ic-stats-block ic-stats-top\">\n  <span class=\"ic-stats-table\">\n    <span class=\"ic-stats-row\">\n      <span class=\"ic-stats-label\">1 year total\n        <span class=\"ic-stats-count\">" + countTotal + "</span>\n      </span>\n      <span class=\"ic-stats-meta\">\n        <span class=\"ic-stats-unit\">contributions</span>\n        <span class=\"ic-stats-date\">" + datesTotal + "</span>\n      </span>\n    </span>\n    <span class=\"ic-stats-row\">\n      <span class=\"ic-stats-label\">Busiest day\n        <span class=\"ic-stats-count\">" + countBest + "</span>\n      </span>\n      <span class=\"ic-stats-meta\">\n        <span class=\"ic-stats-unit\">contributions</span>\n          <span class=\"ic-stats-date\">" + dateBest + "</span>\n        </span>\n      </span>\n    </span>\n  </span>\n</div>";
  ($(html)).appendTo($('.ic-contributions-wrapper'));
  str = ($('.contrib-streak')).html();
  html = $.parseHTML(str);
  countLongest = (html[1].innerText.match(/(((\d{1,3})(,\d{3})*)|(\d+))(.\d+)?/))[0];
  datesLongest = $.trim(html[2].nodeValue);
  str = ($('.contrib-streak-current')).html();
  html = $.parseHTML(str);
  countCurrent = (html[1].innerText.match(/(((\d{1,3})(,\d{3})*)|(\d+))(.\d+)?/))[0];
  datesCurrent = $.trim(html[2].nodeValue);
  html = "<div class=\"ic-stats-block ic-stats-bottom\">\n  <span class=\"ic-stats-table\">\n    <span class=\"ic-stats-row\">\n      <span class=\"ic-stats-label\">Longest streak\n        <span class=\"ic-stats-count\">" + countLongest + "</span>\n      </span>\n      <span class=\"ic-stats-meta\">\n        <span class=\"ic-stats-unit\">days</span>\n        <span class=\"ic-stats-date\">" + datesLongest + "</span>\n      </span>\n    </span>\n    <span class=\"ic-stats-row\">\n      <span class=\"ic-stats-label\">Current streak\n        <span class=\"ic-stats-count\">" + countCurrent + "</span>\n      </span>\n      <span class=\"ic-stats-meta\">\n        <span class=\"ic-stats-unit\">days</span>\n        <span class=\"ic-stats-date\">" + datesCurrent + "</span>\n      </span>\n    </span>\n  </span>\n</div>";
  return ($(html)).appendTo($('.ic-contributions-wrapper'));
};

getSquareColor = function(style) {
  var color, color0, color1, color2, color3, color4;
  color0 = new obelisk.CubeColor().getByHorizontalColor(0xeeeeee);
  color1 = new obelisk.CubeColor().getByHorizontalColor(0xd6e685);
  color2 = new obelisk.CubeColor().getByHorizontalColor(0x8cc665);
  color3 = new obelisk.CubeColor().getByHorizontalColor(0x44a340);
  color4 = new obelisk.CubeColor().getByHorizontalColor(0x1e6823);
  return color = (function() {
    switch (style) {
      case 'fill: rgb(238, 238, 238);':
      case 'fill: #eeeeee;':
        return color0;
      case 'fill: rgb(214, 230, 133);':
      case 'fill: #d6e685;':
        return color1;
      case 'fill: rgb(140, 198, 101);':
      case 'fill: #8cc665;':
        return color2;
      case 'fill: rgb(68,  163, 64 );':
      case 'fill: #44a340;':
        return color3;
      case 'fill: rgb(30,  104, 35 );':
      case 'fill: #1e6823;':
        return color4;
    }
  })();
};

$(function() {
  var observer, target;
  target = document.querySelector('.js-calendar-graph');
  if (target) {
    observer = new MutationObserver(function(mutations) {
      return mutations.forEach(function(mutation) {
        if (mutation.attributeName === 'data-max-contributions') {
          observer.disconnect();
          renderIsometricChart();
          return initUI();
        }
      });
    });
    if ((($('.js-calendar-graph')).data('max-contributions')) != null) {
      renderIsometricChart();
      return initUI();
    } else {
      return observer.observe(target, {
        attributes: true,
        childList: true,
        characterData: true
      });
    }
  }
});
