// Generated by CoffeeScript 1.10.0
var Iso;

Iso = (function() {
  var COLORS, bestDay, contributionsBox, dateOptions, dateWithYearOptions, firstDay, lastDay, maxCount, yearTotal;

  COLORS = [new obelisk.CubeColor().getByHorizontalColor(0xeeeeee), new obelisk.CubeColor().getByHorizontalColor(0xd6e685), new obelisk.CubeColor().getByHorizontalColor(0x8cc665), new obelisk.CubeColor().getByHorizontalColor(0x44a340), new obelisk.CubeColor().getByHorizontalColor(0x1e6823)];

  yearTotal = 0;

  maxCount = 0;

  bestDay = null;

  firstDay = null;

  lastDay = null;

  contributionsBox = null;

  dateOptions = {
    month: "short",
    day: "numeric"
  };

  dateWithYearOptions = {
    month: "short",
    day: "numeric",
    year: "numeric"
  };

  function Iso(target) {
    if (target) {
      this.getSettings((function(_this) {
        return function() {
          _this.initUI();
          _this.loadStats();
          return _this.renderIsometricChart();
        };
      })(this));
    }
  }

  Iso.prototype.getSettings = function(callback) {
    var ref;
    if ((typeof chrome !== "undefined" && chrome !== null ? chrome.storage : void 0) != null) {
      return chrome.storage.local.get(['toggleSetting'], (function(_this) {
        return function(arg) {
          var toggleSetting;
          toggleSetting = arg.toggleSetting;
          _this.toggleSetting = toggleSetting != null ? toggleSetting : 'cubes';
          return callback();
        };
      })(this));
    } else {
      this.toggleSetting = (ref = localStorage.toggleSetting) != null ? ref : 'cubes';
      return callback();
    }
  };

  Iso.prototype.persistSetting = function(key, value, callback) {
    var obj;
    if (callback == null) {
      callback = function() {};
    }
    if ((typeof chrome !== "undefined" && chrome !== null ? chrome.storage : void 0) != null) {
      obj = {};
      obj[key] = value;
      return chrome.storage.local.set(obj, callback);
    } else {
      localStorage[key] = value;
      return callback();
    }
  };

  Iso.prototype.initUI = function() {
    var htmlFooter, htmlToggle, insertLocation, toggleClass;
    ($('<div class="ic-contributions-wrapper"></div>')).insertBefore('#contributions-calendar');
    ($('<canvas id="isometric-contributions" width="728" height="470"></canvas>')).appendTo('.ic-contributions-wrapper');
    contributionsBox = ($('#contributions-calendar')).closest('.boxed-group');
    insertLocation = (($('#contributions-calendar')).closest('.boxed-group')).find('h3');
    toggleClass = '';
    if (((contributionsBox.closest('.box')).find('.box-header .octicon-lock')).length) {
      toggleClass = 'ic-with-lock';
    }
    htmlToggle = "<span class=\"ic-toggle " + toggleClass + "\">\n  <a href=\"#\" class=\"ic-toggle-option tooltipped tooltipped-nw squares\" data-ic-option=\"squares\" aria-label=\"Normal chart view\"></a>\n  <a href=\"#\" class=\"ic-toggle-option tooltipped tooltipped-nw cubes\" data-ic-option=\"cubes\" aria-label=\"Isometric chart view\"></a>\n</span>";
    ($(htmlToggle)).insertBefore(insertLocation);
    htmlFooter = "<span class=\"ic-footer\">\n  <a href=\"#\" class=\"ic-2d-toggle\">Show normal chart below ▾</a>\n</span>";
    ($(htmlFooter)).appendTo($('.ic-contributions-wrapper'));
    return this.observeToggle();
  };

  Iso.prototype.observeToggle = function() {
    var self;
    self = this;
    ($('.ic-toggle-option')).click(function(e) {
      var option;
      e.preventDefault();
      option = ($(this)).data('ic-option');
      if (option === 'squares') {
        (contributionsBox.removeClass('ic-cubes')).addClass('ic-squares');
      } else {
        (contributionsBox.removeClass('ic-squares')).addClass('ic-cubes');
      }
      ($('.ic-toggle-option')).removeClass('active');
      ($(this)).addClass('active');
      return self.persistSetting("toggleSetting", option);
    });
    ($(".ic-toggle-option." + this.toggleSetting)).addClass('active');
    contributionsBox.addClass("ic-" + this.toggleSetting);
    return ($('.ic-2d-toggle')).click(function(e) {
      e.preventDefault();
      if (contributionsBox.hasClass('show-2d')) {
        ($(this)).text('Show normal chart ▾');
        return contributionsBox.removeClass('show-2d');
      } else {
        ($(this)).text('Hide normal chart ▴');
        return contributionsBox.addClass('show-2d');
      }
    });
  };

  Iso.prototype.loadStats = function() {
    var contribColumns, countTotal, dateBest, dateFirst, dateLast, datesTotal, days, str;
    days = $('.js-calendar-graph rect.day');
    days.each(function(d) {
      var currentCount;
      currentCount = ($(this)).data('count');
      yearTotal += currentCount;
      if (d === 0) {
        firstDay = ($(this)).data('date');
      }
      if (d === days.length - 1) {
        lastDay = ($(this)).data('date');
      }
      if (currentCount > maxCount) {
        bestDay = ($(this)).data('date');
        return maxCount = currentCount;
      }
    });
    contribColumns = $('.contrib-column');
    str = ($(contribColumns[0])).find('.contrib-number').html();
    countTotal = yearTotal.toLocaleString();
    dateFirst = this.formatDateString(firstDay, dateWithYearOptions);
    dateLast = this.formatDateString(lastDay, dateWithYearOptions);
    datesTotal = dateFirst + " — " + dateLast;
    dateBest = this.formatDateString(bestDay, dateOptions);
    if (!dateBest) {
      dateBest = 'Not so busy after all';
    }
    return this.renderTopStats(countTotal, datesTotal, maxCount, dateBest);
  };

  Iso.prototype.renderTopStats = function(countTotal, datesTotal, maxCount, dateBest) {
    var html;
    html = "<div class=\"ic-stats-block ic-stats-top\">\n  <span class=\"ic-stats-table\">\n    <span class=\"ic-stats-row\">\n      <span class=\"ic-stats-label\">1 year total\n        <span class=\"ic-stats-count\">" + countTotal + "</span>\n      </span>\n      <span class=\"ic-stats-meta\">\n        <span class=\"ic-stats-unit\">contributions</span>\n        <span class=\"ic-stats-date\">" + datesTotal + "</span>\n      </span>\n    </span>\n    <span class=\"ic-stats-row\">\n      <span class=\"ic-stats-label\">Busiest day\n        <span class=\"ic-stats-count\">" + maxCount + "</span>\n      </span>\n      <span class=\"ic-stats-meta\">\n        <span class=\"ic-stats-unit\">contributions</span>\n          <span class=\"ic-stats-date\">" + dateBest + "</span>\n        </span>\n      </span>\n    </span>\n  </span>\n</div>";
    return ($(html)).appendTo($('.ic-contributions-wrapper'));
  };

  Iso.prototype.renderBottomStats = function(countLongest, datesLongest, countCurrent, datesCurrent) {};

  Iso.prototype.renderIsometricChart = function() {
    var GH_OFFSET, MAX_HEIGHT, SIZE, canvas, contribCount, pixelView, point, self;
    SIZE = 12;
    GH_OFFSET = 13;
    MAX_HEIGHT = 100;
    canvas = document.getElementById('isometric-contributions');
    point = new obelisk.Point(87, 100);
    pixelView = new obelisk.PixelView(canvas, point);
    contribCount = null;
    self = this;
    return ($('.js-calendar-graph g > g')).each(function(g) {
      var x;
      x = parseInt(((($(this)).attr('transform')).match(/(\d+)/))[0] / GH_OFFSET);
      return (($(this)).find('rect')).each(function(r) {
        var color, cube, cubeHeight, dimension, fill, p3d, y;
        r = ($(this)).get(0);
        y = parseInt((($(this)).attr('y')) / GH_OFFSET);
        fill = ($(this)).attr('fill');
        contribCount = parseInt(($(this)).data('count'));
        cubeHeight = 3;
        if (maxCount > 0) {
          cubeHeight += parseInt(MAX_HEIGHT / maxCount * contribCount);
        }
        dimension = new obelisk.CubeDimension(SIZE, SIZE, cubeHeight);
        color = self.getSquareColor(fill);
        cube = new obelisk.Cube(dimension, color, false);
        p3d = new obelisk.Point3D(SIZE * x, SIZE * y, 0);
        return pixelView.renderObject(cube, p3d);
      });
    });
  };

  Iso.prototype.getSquareColor = function(fill) {
    var color;
    return color = (function() {
      switch (fill) {
        case 'rgb(238, 238, 238)':
        case '#eeeeee':
          return COLORS[0];
        case 'rgb(214, 230, 133)':
        case '#d6e685':
          return COLORS[1];
        case 'rgb(140, 198, 101)':
        case '#8cc665':
          return COLORS[2];
        case 'rgb(68, 163, 64)':
        case '#44a340':
          return COLORS[3];
        case 'rgb(30, 104, 35)':
        case '#1e6823':
          return COLORS[4];
      }
    })();
  };

  Iso.prototype.formatDateString = function(dateStr, options) {
    var date, dateParts;
    date = null;
    if (dateStr) {
      dateParts = dateStr.split('-');
      date = new Date(dateParts[0], dateParts[1] - 1, dateParts[2], 0, 0, 0).toLocaleDateString('en-US', options);
    }
    return date;
  };

  return Iso;

})();

$(function() {
  var iso, target;
  target = document.querySelector('.js-calendar-graph');
  return iso = new Iso(target);
});
